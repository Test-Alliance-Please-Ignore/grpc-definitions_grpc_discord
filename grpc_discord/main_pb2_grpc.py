# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc_discord import main_pb2 as grpc__discord_dot_main__pb2


class DiscordStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Check = channel.unary_unary(
                '/grpc_discord.Discord/Check',
                request_serializer=grpc__discord_dot_main__pb2.Ping.SerializeToString,
                response_deserializer=grpc__discord_dot_main__pb2.Pong.FromString,
                )
        self.GetUser = channel.unary_unary(
                '/grpc_discord.Discord/GetUser',
                request_serializer=grpc__discord_dot_main__pb2.GetUserRequest.SerializeToString,
                response_deserializer=grpc__discord_dot_main__pb2.GetUserResponse.FromString,
                )
        self.StripUserRoles = channel.unary_unary(
                '/grpc_discord.Discord/StripUserRoles',
                request_serializer=grpc__discord_dot_main__pb2.StripUserRequest.SerializeToString,
                response_deserializer=grpc__discord_dot_main__pb2.StripUserResponse.FromString,
                )
        self.SetUserNickname = channel.unary_unary(
                '/grpc_discord.Discord/SetUserNickname',
                request_serializer=grpc__discord_dot_main__pb2.UpdateDisplayNameRequest.SerializeToString,
                response_deserializer=grpc__discord_dot_main__pb2.UpdateDisplayNameResponse.FromString,
                )
        self.UpdateRoles = channel.unary_unary(
                '/grpc_discord.Discord/UpdateRoles',
                request_serializer=grpc__discord_dot_main__pb2.UpdateUserRolesRequest.SerializeToString,
                response_deserializer=grpc__discord_dot_main__pb2.UpdateUserRolesResponse.FromString,
                )
        self.KickUser = channel.unary_unary(
                '/grpc_discord.Discord/KickUser',
                request_serializer=grpc__discord_dot_main__pb2.KickUserRequest.SerializeToString,
                response_deserializer=grpc__discord_dot_main__pb2.KickUserResponse.FromString,
                )
        self.RegisterUser = channel.unary_unary(
                '/grpc_discord.Discord/RegisterUser',
                request_serializer=grpc__discord_dot_main__pb2.RegisterUserRequest.SerializeToString,
                response_deserializer=grpc__discord_dot_main__pb2.RegisterUserResponse.FromString,
                )
        self.UpdateUser = channel.unary_unary(
                '/grpc_discord.Discord/UpdateUser',
                request_serializer=grpc__discord_dot_main__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=grpc__discord_dot_main__pb2.UpdateUserResponse.FromString,
                )
        self.InviteUser = channel.unary_unary(
                '/grpc_discord.Discord/InviteUser',
                request_serializer=grpc__discord_dot_main__pb2.InviteUserRequest.SerializeToString,
                response_deserializer=grpc__discord_dot_main__pb2.InviteUserResponse.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/grpc_discord.Discord/SendMessage',
                request_serializer=grpc__discord_dot_main__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=grpc__discord_dot_main__pb2.SendMessageResponse.FromString,
                )


class DiscordServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StripUserRoles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUserNickname(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRoles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KickUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InviteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiscordServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=grpc__discord_dot_main__pb2.Ping.FromString,
                    response_serializer=grpc__discord_dot_main__pb2.Pong.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=grpc__discord_dot_main__pb2.GetUserRequest.FromString,
                    response_serializer=grpc__discord_dot_main__pb2.GetUserResponse.SerializeToString,
            ),
            'StripUserRoles': grpc.unary_unary_rpc_method_handler(
                    servicer.StripUserRoles,
                    request_deserializer=grpc__discord_dot_main__pb2.StripUserRequest.FromString,
                    response_serializer=grpc__discord_dot_main__pb2.StripUserResponse.SerializeToString,
            ),
            'SetUserNickname': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUserNickname,
                    request_deserializer=grpc__discord_dot_main__pb2.UpdateDisplayNameRequest.FromString,
                    response_serializer=grpc__discord_dot_main__pb2.UpdateDisplayNameResponse.SerializeToString,
            ),
            'UpdateRoles': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRoles,
                    request_deserializer=grpc__discord_dot_main__pb2.UpdateUserRolesRequest.FromString,
                    response_serializer=grpc__discord_dot_main__pb2.UpdateUserRolesResponse.SerializeToString,
            ),
            'KickUser': grpc.unary_unary_rpc_method_handler(
                    servicer.KickUser,
                    request_deserializer=grpc__discord_dot_main__pb2.KickUserRequest.FromString,
                    response_serializer=grpc__discord_dot_main__pb2.KickUserResponse.SerializeToString,
            ),
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=grpc__discord_dot_main__pb2.RegisterUserRequest.FromString,
                    response_serializer=grpc__discord_dot_main__pb2.RegisterUserResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=grpc__discord_dot_main__pb2.UpdateUserRequest.FromString,
                    response_serializer=grpc__discord_dot_main__pb2.UpdateUserResponse.SerializeToString,
            ),
            'InviteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.InviteUser,
                    request_deserializer=grpc__discord_dot_main__pb2.InviteUserRequest.FromString,
                    response_serializer=grpc__discord_dot_main__pb2.InviteUserResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=grpc__discord_dot_main__pb2.SendMessageRequest.FromString,
                    response_serializer=grpc__discord_dot_main__pb2.SendMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_discord.Discord', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Discord(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_discord.Discord/Check',
            grpc__discord_dot_main__pb2.Ping.SerializeToString,
            grpc__discord_dot_main__pb2.Pong.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_discord.Discord/GetUser',
            grpc__discord_dot_main__pb2.GetUserRequest.SerializeToString,
            grpc__discord_dot_main__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StripUserRoles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_discord.Discord/StripUserRoles',
            grpc__discord_dot_main__pb2.StripUserRequest.SerializeToString,
            grpc__discord_dot_main__pb2.StripUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetUserNickname(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_discord.Discord/SetUserNickname',
            grpc__discord_dot_main__pb2.UpdateDisplayNameRequest.SerializeToString,
            grpc__discord_dot_main__pb2.UpdateDisplayNameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRoles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_discord.Discord/UpdateRoles',
            grpc__discord_dot_main__pb2.UpdateUserRolesRequest.SerializeToString,
            grpc__discord_dot_main__pb2.UpdateUserRolesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KickUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_discord.Discord/KickUser',
            grpc__discord_dot_main__pb2.KickUserRequest.SerializeToString,
            grpc__discord_dot_main__pb2.KickUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_discord.Discord/RegisterUser',
            grpc__discord_dot_main__pb2.RegisterUserRequest.SerializeToString,
            grpc__discord_dot_main__pb2.RegisterUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_discord.Discord/UpdateUser',
            grpc__discord_dot_main__pb2.UpdateUserRequest.SerializeToString,
            grpc__discord_dot_main__pb2.UpdateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InviteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_discord.Discord/InviteUser',
            grpc__discord_dot_main__pb2.InviteUserRequest.SerializeToString,
            grpc__discord_dot_main__pb2.InviteUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_discord.Discord/SendMessage',
            grpc__discord_dot_main__pb2.SendMessageRequest.SerializeToString,
            grpc__discord_dot_main__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
