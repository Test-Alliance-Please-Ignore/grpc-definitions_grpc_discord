# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: grpc_discord/main.proto
# plugin: grpclib.plugin.main
import abc

import grpclib.const
import grpclib.client

import grpc_discord.main_pb2


class DiscordBase(abc.ABC):

    @abc.abstractmethod
    async def Check(self, stream):
        pass

    @abc.abstractmethod
    async def GetUser(self, stream):
        pass

    @abc.abstractmethod
    async def StripUserRoles(self, stream):
        pass

    @abc.abstractmethod
    async def SetUserNickname(self, stream):
        pass

    @abc.abstractmethod
    async def UpdateRoles(self, stream):
        pass

    @abc.abstractmethod
    async def KickUser(self, stream):
        pass

    @abc.abstractmethod
    async def RegisterUser(self, stream):
        pass

    @abc.abstractmethod
    async def UpdateUser(self, stream):
        pass

    @abc.abstractmethod
    async def InviteUser(self, stream):
        pass

    def __mapping__(self):
        return {
            '/grpc_discord.Discord/Check': grpclib.const.Handler(
                self.Check,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_discord.main_pb2.Ping,
                grpc_discord.main_pb2.Pong,
            ),
            '/grpc_discord.Discord/GetUser': grpclib.const.Handler(
                self.GetUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_discord.main_pb2.GetUserRequest,
                grpc_discord.main_pb2.GetUserResponse,
            ),
            '/grpc_discord.Discord/StripUserRoles': grpclib.const.Handler(
                self.StripUserRoles,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_discord.main_pb2.StripUserRequest,
                grpc_discord.main_pb2.StripUserResponse,
            ),
            '/grpc_discord.Discord/SetUserNickname': grpclib.const.Handler(
                self.SetUserNickname,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_discord.main_pb2.UpdateDisplayNameRequest,
                grpc_discord.main_pb2.UpdateDisplayNameResponse,
            ),
            '/grpc_discord.Discord/UpdateRoles': grpclib.const.Handler(
                self.UpdateRoles,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_discord.main_pb2.UpdateUserRolesRequest,
                grpc_discord.main_pb2.UpdateUserRolesResponse,
            ),
            '/grpc_discord.Discord/KickUser': grpclib.const.Handler(
                self.KickUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_discord.main_pb2.KickUserRequest,
                grpc_discord.main_pb2.KickUserResponse,
            ),
            '/grpc_discord.Discord/RegisterUser': grpclib.const.Handler(
                self.RegisterUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_discord.main_pb2.RegisterUserRequest,
                grpc_discord.main_pb2.RegisterUserResponse,
            ),
            '/grpc_discord.Discord/UpdateUser': grpclib.const.Handler(
                self.UpdateUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_discord.main_pb2.UpdateUserRequest,
                grpc_discord.main_pb2.UpdateUserResponse,
            ),
            '/grpc_discord.Discord/InviteUser': grpclib.const.Handler(
                self.InviteUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_discord.main_pb2.InviteUserRequest,
                grpc_discord.main_pb2.InviteUserResponse,
            ),
        }


class DiscordStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Check = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpc_discord.Discord/Check',
            grpc_discord.main_pb2.Ping,
            grpc_discord.main_pb2.Pong,
        )
        self.GetUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpc_discord.Discord/GetUser',
            grpc_discord.main_pb2.GetUserRequest,
            grpc_discord.main_pb2.GetUserResponse,
        )
        self.StripUserRoles = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpc_discord.Discord/StripUserRoles',
            grpc_discord.main_pb2.StripUserRequest,
            grpc_discord.main_pb2.StripUserResponse,
        )
        self.SetUserNickname = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpc_discord.Discord/SetUserNickname',
            grpc_discord.main_pb2.UpdateDisplayNameRequest,
            grpc_discord.main_pb2.UpdateDisplayNameResponse,
        )
        self.UpdateRoles = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpc_discord.Discord/UpdateRoles',
            grpc_discord.main_pb2.UpdateUserRolesRequest,
            grpc_discord.main_pb2.UpdateUserRolesResponse,
        )
        self.KickUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpc_discord.Discord/KickUser',
            grpc_discord.main_pb2.KickUserRequest,
            grpc_discord.main_pb2.KickUserResponse,
        )
        self.RegisterUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpc_discord.Discord/RegisterUser',
            grpc_discord.main_pb2.RegisterUserRequest,
            grpc_discord.main_pb2.RegisterUserResponse,
        )
        self.UpdateUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpc_discord.Discord/UpdateUser',
            grpc_discord.main_pb2.UpdateUserRequest,
            grpc_discord.main_pb2.UpdateUserResponse,
        )
        self.InviteUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/grpc_discord.Discord/InviteUser',
            grpc_discord.main_pb2.InviteUserRequest,
            grpc_discord.main_pb2.InviteUserResponse,
        )
